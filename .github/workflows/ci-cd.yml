name: CI/CD Pipeline

on:
  push:
    branches: [ master ]

env:
  JAR_NAME: config-server

jobs:
  test:
    runs-on: self-hosted
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 🚀 Starting test phase
      run: echo "Starting test phase for commit ${{ github.sha }}"
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: 🧪 Running tests
      run: |
        echo "Running tests..."
        ./gradlew test
        echo "✅ Tests completed successfully"
    
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/reports/tests/
    
    - name: ✅ Test phase completed
      run: echo "Test phase completed successfully"

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 🔨 Starting build phase
      run: echo "Starting build phase for commit ${{ github.sha }}"
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: 🔨 Building application
      run: |
        echo "Building application..."
        ./gradlew build -x test
        echo "✅ Build completed successfully"
    
    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: build/libs/*.jar
    
    - name: ✅ Build phase completed
      run: echo "Build phase completed successfully"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: 🚀 Starting deployment phase
      run: echo "Starting deployment to production for commit ${{ github.sha }}"
    
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        path: ./artifacts
    
    - name: 📋 List artifacts
      run: |
        echo "Downloaded artifacts:"
        ls -la ./artifacts/
    
    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: 🚀 Deploy to server
      run: |
        echo "🚀 Starting deployment..."
        
        # SSH 호스트 키 추가
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
        echo "📂 Creating deployment directory..."
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p /opt/config-server"
        
        echo "📦 Copying JAR file to server..."
        scp ./artifacts/*.jar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/config-server/${{ env.JAR_NAME }}.jar
        
        echo "🔄 Restarting service..."
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          systemctl --user stop config-server || true
          systemctl --user start config-server
          systemctl --user enable config-server
        '
        
        echo "✅ Deployment completed successfully!"
    
    - name: 🏥 Health check
      run: |
        echo "🏥 Performing health check..."
        sleep 30
        
        # 헬스체크 (최대 5번 시도)
        for i in {1..5}; do
          if curl -f http://${{ secrets.SERVER_HOST }}:8888/actuator/health; then
            echo "✅ Health check passed!"
            exit 0
          else
            echo "⏳ Health check attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        echo "❌ Health check failed after 5 attempts"
        exit 1
    
    - name: ✅ Deployment completed
      run: echo "🎉 Deployment completed successfully!"